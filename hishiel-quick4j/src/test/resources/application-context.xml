<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:cache="http://www.springframework.org/schema/cache" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-4.0.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">

	<description>Application Context Configuration</description>

	<!-- 自动扫描注解类 纳入Spring容器管理 -->
	<context:component-scan base-package="com.hishiel.quick4j" />

	<!-- 引入配置文件 -->
	<context:property-placeholder ignore-unresolvable="true" location="classpath:dev.config.properties" />


	<!-- ================== DataSource Configuration =================== -->

	<!-- @TODO &learn by hishiel -->
	<!-- 数据源配置 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}" />
		<!-- 基本属性url、username、password -->
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<!-- 配置连接池初始化大小、最大活跃、最小空闲、最长等待时间 -->
		<property name="initialSize" value="${jdbc.initialSize}" />
		<property name="maxActive" value="${jdbc.maxActive}" />
		<!-- <property name="maxIdle" value="${jdbc.maxIdle}" /> -->
		<property name="minIdle" value="${jdbc.minIdle}" />
		<property name="maxWait" value="${jdbc.maxWait}" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}" />
		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="false" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="stat" />
	</bean>

	<!-- DbcpDataSource -->
	<bean id="dbcpDataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />

		<property name="initialSize" value="${jdbc.initialSize}" />
		<property name="maxActive" value="${jdbc.maxActive}" />
		<property name="maxIdle" value="${jdbc.maxIdle}" />
		<property name="minIdle" value="${jdbc.minIdle}" />
		<property name="maxWait" value="${jdbc.maxWait}" />
	</bean>


	<!-- ================== Spring Mybatis Configuration =================== -->

	<!-- Mybatis/Spring 整合 扫描所有mapper文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- <property name="configLocation" value="classpath:mybatis-config.xml" /> -->
		<property name="mapperLocations" value="classpath:/mapper/*.xml" />
	</bean>

	<!-- Mybatis/Spring 整合 扫描所有Dao文件 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.hishiel.quick4j.**.dao" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>


	<!-- ================== Transaction Manager Configuration =================== -->

	<!-- 事务管理 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- @TODO &learn by hishiel -->
	<!-- 事务管理 通知 -->
	<!-- select, count 语句，开启只读，提高数据库访问性能 -->
	<!-- insert, update, delete 语句，进行事务管理，只要有异常就回滚 -->
	<!-- 对其他方法 使用默认的事务处理 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="select*" read-only="true" />
			<tx:method name="count*" read-only="true" />
			<tx:method name="insert*" propagation="REQUIRED" rollback-for="java.lang.Throwable" />
			<tx:method name="update*" propagation="REQUIRED" rollback-for="java.lang.Throwable" />
			<tx:method name="delete*" propagation="REQUIRED" rollback-for="java.lang.Throwable" />
			<tx:method name="*" />
		</tx:attributes>
	</tx:advice>

	<!-- @TODO &learn by hishiel -->
	<!-- 事务 AOP 配置 -->
	<!-- <aop:config> -->
	<!-- <aop:pointcut id="serviceMethods" expression="execution(* com.hishiel.quick4j.**.service..*(..))" /> -->
	<!-- <aop:advisor advice-ref="txAdvice" pointcut-ref="serviceMethods" /> -->
	<!-- </aop:config> -->

	<!-- 启用对事务注解的支持 -->
	<tx:annotation-driven transaction-manager="transactionManager" />

	<!-- 启用 CGLIB代理 -->
	<aop:aspectj-autoproxy proxy-target-class="true" />


	<!-- ================== Cache Manager Configuration =================== -->

	<!-- @TODO &learn by hishiel -->
	<!-- Cache 配置 -->
	<cache:annotation-driven cache-manager="cacheManager" />
	<bean id="ehCacheManagerFactory" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
		<property name="configLocation" value="classpath:ehcache.xml" />
	</bean>
	<bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">
		<property name="cacheManager" ref="ehCacheManagerFactory" />
	</bean>


	<!-- ================== Spring Shiro Configuration =================== -->

	<!-- *Shiro 核心过滤器 -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager" />
		<property name="loginUrl" value="/rest/page/login" />
		<property name="successUrl" value="/rest/index" />
		<property name="unauthorizedUrl" value="/rest/page/401" />
		<property name="filterChainDefinitions">
			<value>
				<!-- 静态资源允许访问 -->
				/assets/**=anon
				<!-- 登录页允许访问 -->
				/rest/user/login=anon
				<!-- 其他资源需要认证 -->
				/**=authc
			</value>
		</property>
	</bean>

	<!-- *Shiro 安全管理器 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="jdbcRealm" />
		<!-- @TODO &by hishiel -->
		<!-- <property name="realm" ref="securityRealm" /> -->
		<!-- cacheManager,使用spring缓存工厂 -->
		<!-- <property name="cacheManager" ref="cacheManager" /> -->
		<!-- <property name="sessionManager" ref="sessionManager" /> -->
	</bean>

	<!-- Shiro Credentials Matcher -->
	<bean id="credentialsMatcher" class="org.apache.shiro.authc.credential.Md5CredentialsMatcher" />

	<!-- Shiro Jdbc Realm -->
	<bean id="jdbcRealm" class="org.apache.shiro.realm.jdbc.JdbcRealm">
		<property name="dataSource" ref="dataSource" />
		<property name="credentialsMatcher" ref="credentialsMatcher" />
		<property name="permissionsLookupEnabled" value="true" />
	</bean>

	<!-- Shiro 缓存管理器 -->
	<bean id="shiroCacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<property name="cacheManagerConfigFile" value="classpath:ehcache-shiro.xml" />
	</bean>

	<!--Shiro 会话 DAO -->
	<bean id="sessionDao" class="org.apache.shiro.session.mgt.eis.MemorySessionDAO" />

	<!-- Shiro 会话管理器 -->
	<bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
		<property name="sessionDAO" ref="sessionDao" />
	</bean>

	<!-- Shiro 生命周期处理器 -->
	<bean id="lifecyclebeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />

	<!-- 开启 Shiro 注解 -->
	<aop:config proxy-target-class="true" />
	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager" />
	</bean>


	<!-- ================== Spring MVC Configuration =================== -->

	<!-- 指定自己定义的验证器 -->
	<mvc:annotation-driven validator="validator" />

	<!-- 自定义的验证器 -->
	<bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
		<property name="providerClass" value="org.hibernate.validator.HibernateValidator" />
		<property name="validationMessageSource" ref="messageSource" />
	</bean>

	<!-- 国际化的消息资源文件 -->
	<bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<property name="basename" value="classpath:messages" />
		<property name="defaultEncoding" value="UTF-8" />
		<property name="cacheSeconds" value="60" />
	</bean>

	<mvc:interceptors>
		<bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor" />
	</mvc:interceptors>

	<bean id="localeResolver" class="org.springframework.web.servlet.i18n.CookieLocaleResolver">
		<property name="defaultLocale" value="zh_CN" />
	</bean>

	<!-- 支持返回json(避免IE在ajax请求时，返回json出现下载 ) -->
	<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<ref bean="mappingJacksonHttpMessageConverter" />
			</list>
		</property>
	</bean>
	<bean id="mappingJacksonHttpMessageConverter" class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/plain;charset=UTF-8</value>
				<value>application/json;charset=UTF-8</value>
			</list>
		</property>
	</bean>

	<!-- 对模型视图添加前后缀 -->
	<bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/views/" />
		<property name="suffix" value=".jsp" />
	</bean>

	<!-- 配置SpringMVC文件上传 -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="defaultEncoding" value="utf-8" />
		<property name="maxUploadSize" value="10485760000" />
		<property name="maxInMemorySize" value="40960" />
	</bean>

</beans>
